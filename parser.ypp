%{
    #include <stdio.h>
    #include "output.hpp"

    extern int yylineno;
    extern int yylex();
    int yyerror(const char* message);

     using namespace output;
%}

    %token VOID INT BYTE B BOOL CONST TRUE FALSE IF RETURN WHILE BREAK CONTINUE SC  MINUS_PLUS DIV_MUL COMMENT ID NUM STRING

    %right ASSIGN

    %left OR
    %left AND
    %left RELOP
    %left MINUS_PLUS
    %left DIV_MUL
	%right NOT
    %left LPAREN RPAREN LBRACE RBRACE
    %right ELSE

%%
Program: Funcs                                                      {printProductionRule(1);}

Funcs: /*epsilon*/                                                  {printProductionRule(2);}
       | FuncDecl Funcs                                             {printProductionRule(3);}

FuncDecl: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {printProductionRule(4);}

RetType: Type                                                       {printProductionRule(5);}
         | VOID                                                     {printProductionRule(6);}

Formals: /*epsilon*/                                                {printProductionRule(7);}
         | FormalsList                                              {printProductionRule(8);}

FormalsList: FormalDecl                                             {printProductionRule(9);}

FormalDecl:  Type ID                                                {printProductionRule(10);}

Statements: Statement                                               {printProductionRule(11);}
            | Statements Statement                                  {printProductionRule(12);}

Statement: LBRACE Statements RBRACE                                 {printProductionRule(13);}
           | Type ID SC                                             {printProductionRule(14);}
           | Type ID ASSIGN Exp SC                                  {printProductionRule(15);}
           | ID ASSIGN Exp SC                                       {printProductionRule(16);}
           | Call SC                                                {printProductionRule(17);}
           | RETURN SC                                              {printProductionRule(18);}
           | RETURN Exp SC                                          {printProductionRule(19);}
           | IF LPAREN Exp RPAREN Statement                         {printProductionRule(20);}
           | IF LPAREN Exp RPAREN Statement ELSE Statement          {printProductionRule(21);}
           | WHILE LPAREN Exp RPAREN Statement                      {printProductionRule(22);}
           | BREAK SC                                               {printProductionRule(23);}
           | CONTINUE SC                                            {printProductionRule(24);}

Call: ID LPAREN ExpList RPAREN                                      {printProductionRule(25);}
      | ID LPAREN RPAREN                                            {printProductionRule(26);}

ExpList: Exp                                                        {printProductionRule(27);}

Type: INT                                                           {printProductionRule(28);}
      | BYTE                                                        {printProductionRule(29);}
      | BOOL                                                        {printProductionRule(30);}

Exp: LPAREN Exp RPAREN                                              {printProductionRule(31);}
     | Exp MINUS_PLUS Exp                                              {printProductionRule(32);}
     | Exp DIV_MUL Exp                                             {printProductionRule(33);}
     | ID                                                           {printProductionRule(34);}
     | Call                                                         {printProductionRule(35);}
     | NUM                                                          {printProductionRule(36);}
     | NUM B                                                        {printProductionRule(37);}
     | STRING                                                       {printProductionRule(38);}
     | TRUE                                                         {printProductionRule(39);}
     | FALSE                                                        {printProductionRule(40);}
     | NOT Exp                                                      {printProductionRule(41);}
     | Exp AND Exp                                                  {printProductionRule(42);}
     | Exp OR Exp                                                   {printProductionRule(43);}
     | Exp RELOP Exp                                                {printProductionRule(44);}
     | LPAREN Type RPAREN Exp                                       {printProductionRule(45);}
%%

int main(){
        return yyparse();
}

int yyerror(const char * message){
	errorSyn(yylineno);
	exit(0);
}